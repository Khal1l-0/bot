from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from translations import _
from app import keyboards as kb
from app import database as db
from dotenv import load_dotenv
import os

storage = MemoryStorage()
load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot, storage=storage)

async def on_startup(_):
    await db.db_start()
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

class GetInfoForWeigth(StatesGroup):
    thickness = State()
    length = State()

class GetInfoForLength(StatesGroup):
    thickness = State()
    weight = State()

class GetApplication(StatesGroup):
    name = State()
    applications = State()



    
    
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await register_authenticated_user(message)
    
async def register_authenticated_user(message: Message):
    chat_id = message.chat.id
    user = db.first_select_user(chat_id)
    print(user)
    if user:
        await bot.send_message(message.from_user.id, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await show_main_menu(message)
    else:
        await message.answer('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', reply_markup=kb.send_contact())

@dp.message_handler(content_types=['contact'])
async def fist_register_user(message: Message):
    chat_id = message.chat.id
    number = message.contact.phone_number   
    db.save_user_info(chat_id, number)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    await show_main_menu(message)

async def show_main_menu(message: types.Message):
    await message.answer_sticker('CAACAgIAAxkBAAEKjl1lMUFWTyAUD6oFU7aHYmbpdLSpGQAC2A8AAkjyYEsV-8TaeHRrmDAE')
    chat_id = message.from_user.id  
    lang = db.get_lang(chat_id)     
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(_('–ê–¥–º–∏–Ω', lang), reply_markup=kb.mainAdminMenu(lang)) 
    else:
        await bot.send_message(chat_id=message.from_user.id, text=f' <em>Metall Stroy</em> \n –ú–∏–∂–æ–∑–ª–∞—Ä –∏—à–æ–Ω—á–∏ –±–∏–∑ —É—á—É–Ω –º—É—Ö–∏–º!üèÜ \n üîπ–û—Ü–∏–Ω–∫–æ–≤–∫–∞ 1-2 —Å–æ—Ä—Ç (—Ä—É–ª–æ–Ω) \n üîπ“ö–æ—Ä–∞ –ª–∏—Å—Ç –º–µ—Ç–∞–ª–ª \nüîπ–ü—Ä–æ—Ñ–∏–ª—å –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω —É—á—É–Ω \nüîπ–ü—Ä–æ—Ñ–∏–ª—å –ü–í–• \nüîπ–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∫–∞–Ω–∞–ª–ª–∞—Ä–∏–Ω–∏ –∏—à–ª–∞–± —á–∏“õ–∞—Ä–∏—à –≤–∞ —û—Ä–Ω–∞—Ç–∏—à \n üìû+998995217700 \n https://www.instagram.com/metallstroy_uz/ \n https://t.me/metallstroy_uz \n', parse_mode='HTML')
        await bot.send_message(message.from_user.id, _('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', lang), reply_markup=kb.mainMenu(lang))
         


@dp.message_handler()
async def answer(message: types.Message):
    # await message.reply('–ù–µ –ø–æ–Ω—è–ª')
    lang = db.get_lang(message.from_user.id)
    if message.text == _('–†–∞—Å—á–µ—Ç –º–µ—Ç–∞–ª–ª–∞', lang):
        await message.answer(_('–ß—Ç–æ –Ω–∞–π—Ç–∏?', lang), reply_markup=kb.calcMenu(lang))
    if message.text == _('–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', lang):
        await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', lang), reply_markup=kb.langMenu)
    if message.text == _('–ö–∞—Ç–∞–ª–æ–≥', lang):
        await message.answer(_('–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:', lang), reply_markup=kb.catalog_list(lang))
    if message.text == _('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', lang) and message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(_('–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', lang), reply_markup=kb.mainAdminMenu(lang))
    if message.text == _('–ó–∞—è–≤–∫–∞', lang):
        await GetApplication.name.set()
        await message.answer(_('–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', lang))
    
    #–í–µ—Å:
    if message.text == _('–í–µ—Å –º–µ—Ç–∞–ª–ª–∞', lang):
        await GetInfoForWeigth.thickness.set()
        await bot.send_message(chat_id=message.from_user.id, text=_('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –≤ –º–º (0.4 - 3.0)', lang), reply_markup=kb.ReplyKeyboardRemove())
    #–î–ª–∏–Ω–∞
    if message.text == _('–î–ª–∏–Ω—É –º–µ—Ç–∞–ª–ª–∞', lang):
        await GetInfoForLength.thickness.set()
        await bot.send_message(chat_id=message.from_user.id, text=_('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –≤ –º–º (0.4 - 3.0)', lang), reply_markup=kb.ReplyKeyboardRemove())
          
    # else:
    #     await message.reply(_('–ù–µ –ø–æ–Ω—è–ª', lang))
    

#–í–µ—Å
@dp.message_handler(state=GetInfoForWeigth.thickness)
async def weightByLengthItem1(message: types.Message, state: FSMContext):
    def is_number(item):
        try:
            float(item)
            return True
        except ValueError:
            return False
    lang = db.get_lang(message.from_user.id)
    if is_number(message.text):
        if float(message.text) > 0.4 and float(message.text) < 3.0:
            async with state.proxy() as data:
                data['thickness'] = message.text
            await message.answer(_('–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª–∏–Ω—É –≤ –º (5, 10, 15)', lang))
            await GetInfoForWeigth.next()
        if float(message.text) < 0.4:
            await state.finish()
            if message.from_user.id == int(os.getenv('ADMIN_ID')):
                await message.reply(_('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', lang), reply_markup=kb.mainAdminMenu(lang))
            else:
                await message.reply(_('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', lang), reply_markup=kb.mainMenu(lang))
        if float(message.text) > 3.0:
            await state.finish()
            if message.from_user.id == int(os.getenv('ADMIN_ID')):
                await message.reply(_('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', lang), reply_markup=kb.mainAdminMenu(lang))
            else:
                await message.reply(_('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', lang), reply_markup=kb.mainMenu(lang))
               
    if not is_number(message.text):
        await state.finish()
        if message.from_user.id == int(os.getenv('ADMIN_ID')):
            await message.reply(_('–û—à–∏–±–∫–∞', lang), reply_markup=kb.mainAdminMenu(lang))
        else:
            await message.reply(_('–û—à–∏–±–∫–∞', lang), reply_markup=kb.mainMenu(lang))
        
@dp.message_handler(state=GetInfoForWeigth.length)
async def weightByLengthItem2(message: types.Message, state: FSMContext):
    def is_number(item):
        try:
            float(item)
            return True
        except ValueError:
            return False
   
    lang = db.get_lang(message.from_user.id)
   
    if is_number(message.text):
        async with state.proxy() as data:
            data['length'] = message.text
            
        width = float(1.25)
        formula = float(7.85)
        async with state.proxy() as data:
            length = data['length']
            thickness = data['thickness']
            
        answer= width * formula * float(thickness) * float(length)
        await state.finish()
        await message.answer((_('–û—Ç–≤–µ—Ç: ', lang) + str(round(answer, 3)) + _(' –∫–≥', lang)), reply_markup=kb.mainMenu(lang))
    
    if not is_number(message.text):
        await state.finish()
        if message.from_user.id == int(os.getenv('ADMIN_ID')):
            await message.reply(_('–û—à–∏–±–∫–∞', lang), reply_markup=kb.mainAdminMenu(lang))
        else:
            await message.reply(_('–û—à–∏–±–∫–∞', lang), reply_markup=kb.mainMenu(lang))
        
#---------#

#–î–ª–∏–Ω–∞
@dp.message_handler(state=GetInfoForLength.thickness)
async def lengthByWeightItem1(message: types.Message, state: FSMContext):
    def is_number(item):
        try:
            float(item)
            return True
        except ValueError:
            return False
    lang = db.get_lang(message.from_user.id)
    if is_number(message.text):
        if float(message.text) > 0.4 and float(message.text) < 3.0:
            async with state.proxy() as data:
                data['thickness'] = message.text
            await message.answer(_('–ù–∞–ø–∏—à–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ (5, 10, 15)', lang))
            await GetInfoForLength.next()
        if float(message.text) < 0.4:
            await state.finish()
            if message.from_user.id == int(os.getenv('ADMIN_ID')):
                await message.reply(_('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', lang), reply_markup=kb.mainAdminMenu(lang))
            else:
                await message.reply(_('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', lang), reply_markup=kb.mainMenu(lang))
        if float(message.text) > 3.0:
            await state.finish()
            if message.from_user.id == int(os.getenv('ADMIN_ID')):
                await message.reply(_('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', lang), reply_markup=kb.mainAdminMenu(lang))
            else:
                await message.reply(_('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', lang), reply_markup=kb.mainMenu(lang))
               
    if not is_number(message.text):
        await state.finish()
        if message.from_user.id == int(os.getenv('ADMIN_ID')):
            await message.reply(_('–û—à–∏–±–∫–∞', lang), reply_markup=kb.mainAdminMenu(lang))
        else:
            await message.reply(_('–û—à–∏–±–∫–∞', lang), reply_markup=kb.mainMenu(lang))
     
@dp.message_handler(state=GetInfoForLength.weight)
async def lengthByWeightItem2(message: types.Message, state: FSMContext):
    def is_number(item):
        try:
            float(item)
            return True
        except ValueError:
            return False
    lang = db.get_lang(message.from_user.id)
    if is_number(message.text):
        async with state.proxy() as data:
            data['weight'] = message.text
        width = float(1.25)
        formula = float(7.85)
        async with state.proxy() as data:
            thickness = data['thickness']
            weight = data['weight']

        answer = float(weight) / (width * formula * float(thickness))
        await state.finish()
        await message.answer((_('–û—Ç–≤–µ—Ç: ', lang) + str(round(answer, 3)) + _(' –º', lang)), reply_markup=kb.mainMenu(lang))
    
    if not is_number(message.text):
        await state.finish()
        if message.from_user.id == int(os.getenv('ADMIN_ID')):
            await message.reply(_('–û—à–∏–±–∫–∞', lang), reply_markup=kb.mainAdminMenu(lang))
        else:
            await message.reply(_('–û—à–∏–±–∫–∞', lang), reply_markup=kb.mainMenu(lang))
   
#---------#      

#–ó–∞—è–≤–∫–∞
    
@dp.message_handler(state=GetApplication.name)
async def GetAppName(message: types.Message, state: FSMContext):
    lang = db.get_lang(message.from_user.id)
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer(_('–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',lang))
    await GetApplication.next()

@dp.message_handler(state=GetApplication.applications)
async def GetApp(message: types.Message, state: FSMContext):
    lang = db.get_lang(message.from_user.id)
    async with state.proxy() as data:
        data['applications'] = message.text
    await db.add_application(state)
    await state.finish()
    await message.answer(_('–ü—Ä–∏–Ω—è—Ç–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏',lang), reply_markup=kb.mainMenu(lang)) 

    
#---------# 
@dp.callback_query_handler(text_contains = "lang_")
async def setLanguage(callback: types.CallbackQuery):
    lang = callback.data[5:]
    db.change_lang(lang)
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    lang2 = db.get_lang(callback.from_user.id)
    if callback.from_user.id == int(os.getenv('ADMIN_ID')):
        await bot.send_message(callback.from_user.id, _('–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', lang), reply_markup=kb.mainAdminMenu(lang2))
    else:
        await bot.send_message(callback.from_user.id, _('–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', lang), reply_markup=kb.mainMenu(lang2))

@dp.callback_query_handler()
async def callback_query_keyboards(callback_query: types.CallbackQuery):
    lang = db.get_lang(callback_query.from_user.id)
    media = types.MediaGroup()
    if callback_query.data == 'catalog-1':
        price = '100'
        
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        media.attach_photo(types.InputFile('media/otsinkovka_rulon.jpg'), _('–û—Ç—Ü–∏–Ω–∫–æ–≤–∫–∞ —Ä—É–ª–æ–Ω 1-2 —Å–æ—Ä—Ç.', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
    
    elif callback_query.data == 'catalog-2':
        price = '100'
        
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        media.attach_photo(types.InputFile('media/ventilasiya.jpg'), _('–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
        
    elif callback_query.data == 'catalog-3': 
        price = '100'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        media.attach_photo(types.InputFile('media/cherniy_list.jpg'), _('–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
        
    elif callback_query.data == 'catalog-4':
        price = '100'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        media.attach_photo(types.InputFile('media/pvx.jpg'), _('–ú–µ—Ç–∞–ª –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ü–í–•', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
    
    elif callback_query.data == 'catalog-5':
        price = '100'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        media.attach_photo(types.InputFile('media/metal.jpg'), _('–ü—Ä–æ—Ñ–∏–ª—å –º–µ—Ç–∞–ª–∏—á–µ—Å–∫–∏–π', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
    
    elif callback_query.data == 'catalog-6':
        price = '100'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        media.attach_photo(types.InputFile('media/konteyner.jpg'), _('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
    
    elif callback_query.data == 'catalog-7':
        price = '100'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        media.attach_photo(types.InputFile('media/armatura.jpg'), _('–ê—Ä–º–∞—Ç—É—Ä—ã –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
    
    elif callback_query.data == 'catalog-8':
        price = '100'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        media.attach_photo(types.InputFile('media/kanatka.jpg'), _('–ö–∞—Ç–∞–Ω–∫–∞', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
    
    elif callback_query.data == 'catalog-9':
        price = '100'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        # media.attach_photo(types.InputFile('media/gipsokarton-1.jpg'))
        media.attach_photo(types.InputFile('media/gipsokarton-1.jpg'), _('–ü—Ä–æ—Ñ–∏–ª—å –≥–∏–ø—Å–∞–∫–∞—Ä—Ç–æ–Ω–∞', lang) + _('\n–¶–µ–Ω–∞', lang) + price + '$')
        await bot.send_media_group(callback_query.from_user.id, media=media)
    

    
@dp.message_handler(commands=['ru'])
async def cmd_ru(message: types.Message):
    await register_authenticated_user(message)
       
    
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)